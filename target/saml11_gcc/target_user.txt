=====================================================================
                           SAM L11 ターゲット依存部
                                  Last Modified:2018 Jul 16 22:58:04
=====================================================================

○概要

SAM L11 ターゲット依存部は，MicroChip SAM L11 をサポートしている．ボー
ドとしては，SAM L11 Xplained Pro Evaluation Kit をサポートしている．

○カーネルの使用リソース

カーネルは以下のリソースを使用する．

  ・ROM/RAM
     コードとデータを配置する．
     使用量はオブジェクト数に依存する．
  
  ・SysTick
     カーネル内部のティックの生成に用いる．
     
  ・SERCOM2
     コンソールの出力に使用．


○Atmel Studioによるビルドでデバッグ

Atmel StudioによりGUIによるビルドとデバッグが可能である．

動作確認を行ったのは次のバージョンである．

Atmel Studio 7.0

Atmel Studio はソースコードのエンコードがutf8である必要があるため，ソー
ス全体をutf8にすることを推奨する．

●Atmel Studio のインストール
以下のサイトにアクセスして

 http://www.atmel.com/ja/jp/tools/ATMELSTUDIO.aspx

以下のツールを選択する．

 Atmel Studio 7.0 web installer (recommended)
 
メールアドレス等を入力するとダウンロード可能である．

●付属のプロジェクトによるビルド

./atmelstudio/asp.atslnを開く
メニュー -> Build -> Build Solution を選択してビルド
メニュー -> Debug -> Start Debugging and Break を選択をしてデバッグの開始

●プロジェクトの作成方法

フォルダを以下の場所に作成する．<asp>はASPカーネルのソースを展開したフ
ォルダである．

<asp>/<dir1>/<dir2>/

<dir2>以下に本フォルダのMakefileをコピーする．<asp>/sampleから 
sample1.c/sample1.cfg/sample1.h をコピーする．フォルダの場所を変更した
い場合は，MakefileのSRCDIRを変更すること．

●Atmelプロジェクトの作成

メニュー -> File -> New -> Project

左のメニューから

C/C++  -> GCC C Executable Project を選択

下のボックスの Name に asp と入力．

Device Selection の画面が出るので，

Device Family : SAML11

を選択して，リストから，

ATSAML11E16

を選択．

プロジェクトが作成されるので，main.c 等は不要なので削除．

メニュー -> Debug -> asp Properties  を選択

Build タブを選択
Use External Makefile を選択
Make file Name に実行したいMakefileをプロジェクトからの相対パスで指定．

ボードのPROGRAMINGポートを接続

Tool タブを選択
Select debugger/programmer から EDBG を選択
Programmin settings を Incremental Programming を選択

Advanced タブを選択
Use GDB のチェックを外す

○ライブラリ

./lib 以下のファイルは，Atmel Studio のサンプルの生成で作成されたファ
イルを置くことで，各種初期化をこれらのファイルにより行うことが可能であ
る．

設定を変更したい場合は，Atmel Studio でサンプルの生成時に設定を変更し
て，ファイルを上書きすればよい．

現状のファイルで設定は次の通りである．

・クロック
  ・内蔵16Mhzをコア及び周辺回路に使用．


○NonSecureでの実行

NonSecureで実行するためのAtmelStudioのソリューションとして，

./tz_solution

を用意している．このソリューションには2個のプロジェクトが含まれている．

TZ-Secure
Secure側で動作するプログラムのプロジェクト．Atmel Studioで 
TZ-SecureDriver-S をベースに以下の点を変更して生成したプロジェクト．

TrustZoneManager
 BOOTPROT = 0
 AS   = 0x40
 ANSC = 0x04
 RS   = 0x10

 SecureDriverExampleのveneerを生成しないようにする．

OSCCTRL
・16Mhz INTERNAL OSCI... の出力クロックを16Mhzとする．

TZ-NonSecure
Non-Secure側で動作するプログラムのプロジェクト．
ASPカーネルをビルドする．

●メモリの設定

メモリ設定は次の通りである．

Secure
 ROM : 16KB(内 NSC 128byte)
 RAM : 2KB

Non-Secure
 ROM : 48KB 
 RAM : 14KB

●ビルド

ビルドはTZ-Secureをまずビルドし，次にTZ-NonSecure側をビルドする．

●実行

通常にダウンロードと実行することにより，まずTZ-Secureのプログラムがが
実行され，初期化終了後に，NonSecureに移行してASPが実行される．


●NSC関数の作成

NonSecure側からSecre側の機能を呼び出し可能な関数の作成方法は次の通りで
ある．

Secure側

trustzone/trustzone_veneer.h 
・extern宣言を記載する．

trustzone/trustzone_veneer.c

アトリビュートを付けて関数を定義

int32_t __attribute__((cmse_nonsecure_entry)) nsc_ext_irq_init(struct ext_irq_setting irq_setting) {

}

Non-Secure側
・trustzone/trustzone_veneer.h をインクルード
・Secure側で定義した関数を呼び出す．


○変更履歴

2018/07/14
・新規作成
